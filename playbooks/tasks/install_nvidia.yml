---
# Copyright 2016, IBM US, Inc.
#
#gpudb tasks:  
#

- name: Copy cuda8 library to target machines
  copy: src="{{ reference_architecture['gpudb_nvidia_playbook']['cuda_deb'] }}" dest="/tmp/nvidia.deb"

- name: Copy cudnn5 library to target machines
  copy: src="{{ reference_architecture['gpudb_nvidia_playbook']['cudnn5_deb'] }}" dest="/tmp/cudnn5.deb"

- name: Copy cudnn5 dev library to target machines
  copy: src="{{ reference_architecture['gpudb_nvidia_playbook']['cudnn5_dev_deb'] }}" dest="/tmp/cudnn5_dev.deb"

- name: install dkms prereqs
  shell: "apt-get install -y make build-essential dpkg-dev patch gcc kmod initramfs-tools"

- name: Copy dkms deb
  copy: src="{{ reference_architecture['gpudb_nvidia_playbook']['dkms_deb'] }}" dest="/tmp/dkms.deb"
#- debug: msg=" RESULT is {{ reference_architecture['gpudb_nvidia_playbook']['description'] }}"

# Use filename created in previous step and install.  This is the cuda repo
- name: Install dkms
  shell: dpkg -i /tmp/dkms.deb

#NOTE: We are not using apt due to bugs in ansible code causing 
#apt-get update to fail

# Use filename created in previous step and install.  This is the cuda repo
- name: Install cuda repo
  shell: dpkg -i /tmp/nvidia.deb

#refresh caches to allow cuda repo to be part of the list
- shell: apt-get update
  ignore_errors: yes

#install nvidia kernel driver only, leave the rest of cuda alone.
- name: install cuda driver
  shell: "apt-get install --allow-unauthenticated -y cuda "

# Install the cudnn5 libraries
- name: Install cudnn libraries
  shell: dpkg -i /tmp/cudnn5.deb /tmp/cudnn5_dev.deb
...
